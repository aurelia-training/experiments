{"version":3,"sources":["app.ts","environment.ts","main.ts","resources/index.ts","/home/jon/Documents/github/aurelia-training/experiments/experiment-1/src/app.html"],"names":[],"mappings":";;;;;;;;;;;;IAEA;QA2DE;YAxDA,aAAQ,GAAU,KAAK,CAAC;YAId,cAAS,GAAU,EAAE,CAAC;YAStB,qBAAgB,GAAU,WAAW,CAAC;YAyBhD,eAAU,GAAQ,IAAI,IAAI,EAAE,CAAC;YACnB,eAAU,GAAU,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAkBlE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;YAC1D,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAChD,CAAC;QAtDD,8BAAgB,GAAhB,UAAiB,QAAQ,EAAE,QAAQ;YACjC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,QAAQ,CAAC,CAAC;QACzC,CAAC;QAQD,qCAAuB,GAAvB,UAAwB,QAAQ,EAAE,QAAQ;YACxC,IAAI,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC3C,EAAE,CAAA,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC;gBACvC,MAAM,CAAC;YACT,CAAC;YAGD,IAAI,YAAY,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAG1D,IAAI,aAAa,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;gBAClD,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3E,CAAC;YAGD,IAAI,CAAC,cAAc,GAAG,GAAG,GAAG,aAAa,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/E,CAAC;QAUD,+BAAiB,GAAjB,UAAkB,QAAQ,EAAE,QAAQ;YAClC,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrC,IAAI,IAAI,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACvD,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/D,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;YAEzC,IAAI,CAAC,YAAY,GAAG,KAAK,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;YACpD,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,EAAE,GAAG,IAAI,CAAC;QAC5B,CAAC;QASH,UAAC;IAAD,CAhEA,AAgEC,IAAA;IAzDW;QAAT,4BAAQ;;0CAAuB;IAStB;QAAT,4BAAQ;;iDAAuC;IA0BtC;QAAT,4BAAQ;;2CAA2D;IA1CzD,kBAAG;;;;;;ICFhB,kBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;;ICEI,OAAQ,CAAC,MAAM,CAAC;QACpB,QAAQ,EAAE;YACR,gBAAgB,EAAE,KAAK;SACxB;KACF,CAAC,CAAC;IAEH,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAdD,8BAcC;;;;;;ICvBD,mBAA0B,MAA8B;IAExD,CAAC;IAFD,8BAEC;;;ACJD","file":"app-bundle.js","sourcesContent":["import {bindable} from \"aurelia-framework\";\n\nexport class App {\n\n  // experiment 1\n  lastName:string = \"Lam\";\n  // conclusion: changes after every keystroke\n\n  // experiment 2\n  @bindable wordCount:number = 46;\n  wordCountChanged(newValue, oldValue) {\n    console.log(newValue, typeof newValue);\n  }\n  // conclusion: wordCount changes type from number to string, even if a numerical value is inputted\n\n  // experiment 3\n  // note: can use libraries such as jquery-numberformatter (https://code.google.com/archive/p/jquery-numberformatter/) but there's no native custom number formatter that I know of\n  // note: because <input> values are strings I will keep all values as strings instead of numbers and do regular expression parsing on them instead of using a library\n  @bindable unformattedValue:string = \"3426.1179\";\n  formattedValue:string;\n  unformattedValueChanged(newValue, oldValue) {\n    let match = /(\\d+)(\\.\\d+)?/.exec(newValue);\n    if(match == null) {\n      this.formattedValue = \"Invalid number\";\n      return;\n    }\n\n    // round after two decimal places\n    let afterDecimal = parseFloat(match[2] || \"0\").toFixed(2);\n\n    // add commas at spacing 3\n    let beforeDecimal = match[1];\n    for(let i = beforeDecimal.length-3; i > 0; i -= 3) {\n      beforeDecimal = beforeDecimal.slice(0, i) + \",\" + beforeDecimal.slice(i);\n    }\n\n    // concatenate everything back together again\n    this.formattedValue = \"$\" + beforeDecimal + afterDecimal.toString().slice(1);\n  }\n  // conclusio: number formatting in JS is actually quite tedious as far as I know\n\n  // experiment 4\n  // note: again, there are libraries such as dateformat (http://blog.stevenlevithan.com/archives/date-time-format) but I decided to go VanillaJS in my approach\n  dateObject:Date = new Date();\n  @bindable dateString:string = this.dateObject.toJSON().slice(0, 10); // this formats the date object to RFC3339 standards, which the <input type=\"date\"> accepts\n  dateMMDDYYYY:string;\n  dateDDMM:string;\n  dateYYYY:string;\n  dateStringChanged(newValue, oldValue) {\n    this.dateObject = new Date(newValue);\n    let date = (\"0\" + this.dateObject.getDate()).slice(-2);\n    let month = (\"0\" + (this.dateObject.getMonth() + 1)).slice(-2); // month is zero-indexed\n    let year = this.dateObject.getFullYear();\n\n    this.dateMMDDYYYY = month + \"/\" + date + \"/\" + year;\n    this.dateDDMM = date + \" \" + month;\n    this.dateYYYY = \"\" + year;\n  }\n  // result: date formatting is less tedious than other number formatting because of getter functions, but still some conventions for the <input> element that need to be met\n\n  // run both formatting functions at the beginning\n  constructor() {\n    this.unformattedValueChanged(this.unformattedValue, null);\n    this.dateStringChanged(this.dateString, null);\n  }\n\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n",null],"sourceRoot":"../src"}